<<알고리즘 구현 아이디어>>

======================================
[1] 지도 설명
--------------------------------------
//초록색 사각형
1-1) "그룹 직선" 3개 -> 각각 Array로 구현

그룹 알파(groupA) : 가로 A-G
그룹 베타(groupB) : 가로 A-D
그룹 찰리(groupC) : 세로 E-B
그룹 델타(groupD) : 세로 F-C
그룹 에코(groupE) : 세로 G-D


// 빨강 원에 초록 알파벳
1-2) 각 웨이포인트 A~G = 길 꺾는 지점


// 작은 파란색 원들
1-3) 현재 위치 나타냄 (ex. "425호")

======================================
[2] 거리계산 위한 DB 추가 정보
--------------------------------------
-> 각 파란색 원들은 "그룹 직선" 내에서 좌표(position)를 가짐, 미터 거리를 나타냄
-> 이 거리들은 '방향 화살표 밑에 m 거리' 표시에 쓰임

(ex.
그룹 베타(groupB) Array 에서
425호=0, 418호=25, 412호=88... )

======================================
[3] 길찾기 과정 (좌하단 425호 -> 우상단 407호)
--------------------------------------

3-1) 출발지의 그룹 파악
(ex. 425호는 그룹 베타 groupB임.)

3-2) 도착지의 그룹 파악
(ex. 407호는 2개의 그룹 가짐
그룹 알파 groupA & 그룹 에코 groupE)

3-3) 출발지 그룹과 도착지 그룹의 교점 파악
- (출) gourpB X (도) groupA = 웨이포인트D
- (출) groupB X (도) groupE = 웨이포인트A


3-4) 교점들 중 도착지에 가까운 곳으로 안내
(ex. 이 경우에는 웨이포인트D) 
* 교점이 없는 경우 일단 그룹 B로 안내,
그룹 B에 진입하면 알고리즘 처음으로
* 같은 그룹 안에 있을 경우 바로 목적지로 안내

* 웨이포인트D를 경유지로 설정하고 플래그 설정
* 이동 중 현위치의 그룹이 변경될 경우 알고리즘 처음으로
* 웨이포인트D에 도착한 경우 다시 알고리즘 처음으로 돌아감

3-5) 혹시 가다가 우연히 도착지에 도달하면 안내종료

3-6) 계속 하다보면 도착?!
